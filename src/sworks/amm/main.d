/**
 * Version:      0.164(dmd2.060)
 * Date:         2012-Oct-28 23:54:38
 * Authors:      KUMA
 * License:      CC0
 */

module sworks.amm.main;
import std.file, std.string, std.exception, std.conv;
import sworks.compo.util.output;
import sworks.compo.stylexml.macros;
import sworks.compo.stylexml.parser;
import sworks.amm.default_data;
import sworks.amm.args_data;
import sworks.amm.ready_data;
import sworks.amm.deps_data;
debug import std.stdio : writeln;

string header =
"Automatic Makefile Maker v0.164(dmd2.060)
";

// コマンドラインに表示するヘルプメッセージ
string help= q"HELP
** 使い方
$>amm [target.exe] [make-style.xml] [option for dmd] [options] rootfile.d

** options
h help ?           : ヘルプを表示します。
macro_name         : マクロを定義済みとします。
macro_name=value   : マクロに値を設定します。
m=Makefile         : 出力される Makefile のファイル名を指定します。
                     拡張子、'.mak' のファイルを渡しても可
root=path          : ルートとなるソースファイルを指定します。
                     拡張子、'.d' のファイルを渡しても可
v=0.001            : ヴァージョン文字列を指定します。数字以外も指定できます。
                     拙著の vwrite.exe 向けです。

help macro         : 定義済みマクロを一覧表示します。
**
HELP";

struct MACROKEY
{
	// ほぼ固定
	enum GENERATE_DEPS = "gen_deps_command";
	enum DEPS_FILE = "deps_file";
	enum FOOTER = "footer";
	enum STYLE_FILE = "style_file";
	enum MAK_EXT = "mak_ext";
	enum XML_EXT = "xml_ext";
	enum DEF_EXT = "def_ext";
	enum DDOC_EXT = "ddoc_ext";
	enum DLL_EXT = "dll_ext";

	// 実行環境依存
	enum BRACKET = "bracket";
	enum EXE_EXT = "exe_ext";
	enum OBJ_EXT = "obj_ext";
	enum LIB_EXT = "lib_ext";
	enum SRC_EXT = "src_ext";
	enum RC_EXT = "rc_ext";
	enum IS_GMAKE = "gmake";

	// amm が用意する。
	enum DEPENDENCE = "dependencies";
	enum REMAKE_COMMAND = "remake_command";
	enum TO_COMPILE = "to_compile";
	enum TO_LINK = "to_link";

	// コマンドラインから省略指定で設定する。
	enum SRC_DIRECTORY = "src";
	enum ROOT_FILE = "root";
	enum TARGET = "target";
	enum COMPILE_FLAG = "compile_flag";
	enum LINK_FLAG = "link_flag";
	enum LIB_FILE = "libs";
	enum RC_FILE = "rc";
	enum DEF_FILE = "def";
	enum DDOC_FILE = "ddoc";
	enum DDOC_DIRECTORY = "dd";
	enum MAKEFILE = "m";
	enum TARGET_IS_DLL = "is_dll";
	enum TARGET_IS_LIB = "is_lib";

	// コマンドラインから完全指定で設定する。
	enum IMPORT_DIRECTORY = "imp";
	enum EXT_LIB_DIRECTORY = "lib";
	enum VWRITE = "v";
	enum ENVIRONMENT_ID = "env";
}

struct DEFAULT_VALUE
{
	enum SRC_EXT = ".d";
	enum RC_EXT = ".rc";
	enum MAK_EXT = ".mak";
	enum XML_EXT = ".xml";
	enum DEF_EXT = ".def";
	enum DDOC_EXT = ".ddoc";
	enum DLL_EXT = ".dll";

	version( Windows )
	{
		enum BRACKET = "rn";
		enum EXE_EXT = ".exe";
		enum OBJ_EXT = ".obj";
		enum LIB_EXT = ".lib";
	}
	version( linux )
	{
		enum BRACKET = "n";
		enum EXE_EXT = "";
		enum OBJ_EXT = ".o";
		enum LIB_EXT = ".a";
		enum IS_GMAKE = "defined";
	}

	enum GENERATE_DEPS = "dmd -c -op -o- -debug";
	enum DEPS_FILE = "tempdeps";
	enum MAKEFILE = "Makefile";
	enum SRC_DIRECTORY = "src";
	enum IMPORT_DIRECTORY = "import";
	enum EXT_LIB_DIRECTORY = "lib";
	enum DDOC_DIRECTORY = "doc";
	enum STYLE_FILE = "make-style.xml";
	enum FOOTER = "## generated by amm.";
}

struct EXPLANATION
{
	// ほぼ固定
	enum GENERATE_DEPS = q"EXP
DMD に依存関係を解決させる為のコマンド。
>GEN_DEPS_COMMAND ~ "-deps="DEPS_FILE ~ COMPILE_FLAG;
が実行される。
EXP";

	enum DEPS_FILE = q"EXP
GEN_DEPS_COMMAND により生成される一時ファイル名。
依存関係の解決後、このファイルは消去される。
EXP";

	enum FOOTER = q"EXP
Makefile の最後に出力される。
これ以降に手動で付け足された部分は、amm を再実行し、Makefile を作り直しても残る。
EXP";

	enum STYLE_FILE = q"EXP
Makefile の出力を決定する設定ファイル。
コマンドライン引数に拡張子が ".xml" のファイルを渡すとこのマクロに設定される。
EXP";

	enum MAK_EXT = q"EXP
Makefile の拡張子。
この拡張子を持つファイル名をコマンドライン引数として渡すと、マクロ名 "M" の値としてファイルが登録される。
EXP";

	enum XML_EXT = q"EXP
amm の設定ファイルの持つ拡張子。
この拡張子を持つファイル名をコマンドライン引数として渡すと、マクロ名 "STYLE_FILE" の値としてファイルが登録される。
EXP";

	enum DEF_EXT = q"EXP
D言語の module definition file の拡張子。
この拡張子を持つファイル名をコマンドライン引数として渡すと、マクロ名 "DEF" の値としてファイル登録される。
EXP";

	enum DDOC_EXT = q"EXP
DDOCファイルの拡張子
このマクロの値として設定された拡張子を持つファイル名をコマンドライン引数として渡すと、マクロ名 "DDOC" の値としてファイルが登録される。
EXP";

	enum DLL_EXT = q"EXP
Dynamic Link Library ファイルの拡張子。
この拡張子を持つファイル名をコマンドライン引数として渡すと、amm によって生成される Makefile のターゲットファイルとして、マクロ名 "TARGET" の値にファイルが登録される。
また、ターゲットファイルが DLL であることを示す、マクロ "IS_DLL" が定義される。
EXP";

	// 実行環境依存
	enum BRACKET =
"改行文字コードを示す\n"
"マクロの値として、次の文字列を渡すことで改行コードを指定する。\n"
"\n"
"文字列   | 対応する改行コード\n"
" \"rn\"    |  CR + LF\n"
" \"r\"     |  CR\n"
" \"n\"     |  LF";

	enum EXE_EXT =
"実行形式のファイルの拡張子。\n"
"この拡張子を持つファイル名をコマンドライン引数として渡すと、amm によって生成される Makefile のターゲットファイルとして、マクロ名 \"TARGET\" の値にファイルが登録される。";

	enum OBJ_EXT = q"EXP
オブジェクトファイルの拡張子。
この拡張子を持つファイル名をコマンドライン引数として渡すと、マクロ名 "LIBS" の値としてファイルが登録される。
EXP";

	enum LIB_EXT = q"EXP
ライブラリファイルの拡張子。
この拡張子を持つファイル名をコマンドライン引数として渡すと、マクロ名 "LIBS" の値としてファイルが登録される。
また、マクロ名 "TARGET" の値として登録されたファイル名がこの拡張子を持っていた場合、ターゲットがライブラリファイルであること示すマクロ "IS_LIB" が定義される。
EXP";

	enum SRC_EXT = q"EXP
ソースファイルの拡張子。
この拡張子を持つファイル名をコマンドライン引数として渡すと、マクロ名 "ROOT" の値としてファイルが登録され、プロジェクトの依存関係を解決するためのルートファイルとして扱われる。
また、マクロ名 "TARGET" が指定されなかった場合は、ROOT + EXE_EXT がマクロ名 "TARGET" に設定される。
EXP";

	enum RC_EXT = q"EXP
リソースファイルの拡張子。
この拡張子を持つファイル名をコマンドライン引数として渡すと、マクロ名 "RC" の値としてファイルが登録される。
EXP";

	enum IS_GMAKE = q"EXP
出力する Makefile が GNU Make 向けであるかどうか。
linux では初期値で "defined"。
EXP";

	// amm が用意する。
	enum DEPENDENCE = q"EXP
DMD により解決された依存関係を表わ文字列が amm により登録される。
EXP";

	enum REMAKE_COMMAND = q"EXP
amm を起動した時のコマンドが登録される。
EXP";

	enum TO_COMPILE = q"EXP
DMD により解決された依存関係のうち、マクロ名 "SRC" に登録されたフォルダ以下に含まれ、マクロ名 "IMP" に登録されたフォルダ以下には含まれなかったものがここに登録される。
EXP";

	enum TO_LINK = q"EXP
リンクされるべきファイルが登録される。
EXP";

	// コマンドラインから省略指定で設定する。
	enum ROOT_FILE = q"EXP
プロジェクトのルートとなるファイルが登録される。
コマンドライン引数のうち、マクロ名 "SRC_EXT" に登録された拡張子を持つものがここに登録される。
EXP";

	enum SRC_DIRECTORY = q"EXP
コマンドライン引数のうち、"-Ixxx;yyy;zzz" のような形で指定されたものがここに登録される。
ソースファイル探索のルートフォルダを決定する。
EXP";

	enum TARGET =
"amm が生成する Makefile のターゲットとなるファイル名。\n"
"省略した場合は、ROOT + EXE_EXT が用いられる。";

	enum COMPILE_FLAG =
"DMDのコンパイルオプション。\n"
"コマンドライン引数のうち、\"-\"(ハイフン)で始まるものがここに登録される。";

	enum LINK_FLAG =
"DMDのリンクオプション。\n"
"コマンドライン引数のうち、\"-L\" で始まるものがここに登録される。";

	enum LIB_FILE = q"EXP
ライブラリファイル(リンクされるがコンパイルはされないファイル)が登録される。
コマンドライン引数のうち、マクロ名 "LIB_EXT" に登録された拡張子を持つファイルがここに登録される。
EXP";

	enum RC_FILE = q"EXP
リソースファイル。
コマンドライン引数のうち、マクロ名 "RC_EXT" に登録された拡張子を持つファイルがここに登録される。
EXP";

	enum DEF_FILE = q"EXP
module definition file。
コマンドライン引数のうち、マクロ名 "DEF_EXT" に登録された拡張子を持つファイルがここに登録される。
EXP";

	enum DDOC_FILE =
"DDOCファイル。\n"
"コマンドライン引数のうち、マクロ名 \"DDOC_EXT\" に登録された拡張子を持つファイルがここに登録される。";

	enum DDOC_DIRECTORY = q"EXP
DMD の '-d' オプションにより生成されるドキュメントファイル群の生成先フォルダ。
コマンドライン引数のうち、"-Ddxxx" という形のものが登録される。
EXP";

	enum MAKEFILE = q"EXP
amm が生成する Makefile のファイル名。
コマンドライン引数のうち、マクロ名 "MAK_EXT" に登録された拡張子を持つファイルがここに登録される。
EXP";

	enum TARGET_IS_DLL = q"EXP
Makefile のターゲットが Dynamic Link Library だった場合に defined となる。
EXP";

	enum TARGET_IS_LIB = q"EXP
Makefile のターゲットが ライブラリファイルだった場合に defined となる。
EXP";

	// コマンドラインから完全指定で設定する。
	enum IMPORT_DIRECTORY = q"EXP
DMD の "-I" オプションのパラメタとして引き渡さるが、コンパイルはされないファイルを含むフォルダ名を指定する。
EXP";

	enum EXT_LIB_DIRECTORY = q"EXP
リンクされるべきライブラリを含むフォルダ名を指定する。
EXP";

	enum VWRITE = q"EXP
vwrite.exe に引き渡されるヴァージョン情報を表わす文字列を登録する。
EXP";

	enum ENVIRONMENT_ID =
"設定ファイル、make-style.xml の <environment>タグのセレクタ。\n"
"このマクロに設定された値とマッチする(0==icmp()) id 属性を持つ<environment>要素が評価される。";

}

void output_macro_help( )
{
	Output.ln( "定義済みマクロ一覧" );
	Output.ln( "--------------------" );
	foreach( KEY ; __traits( allMembers, MACROKEY ) )
	{
		Output.ln( "マクロ名 : '", __traits( getMember, MACROKEY, KEY ), "'" );
		static if( __traits( hasMember, DEFAULT_VALUE, KEY ) )
			Output.ln( "初期値 : '", __traits( getMember, DEFAULT_VALUE, KEY ), "'" );
		static if( __traits( hasMember, EXPLANATION, KEY ) )
		{
			Output.ln( "説明 :" );
			Output.ln( __traits( getMember, EXPLANATION, KEY ) );
		}
		Output.ln();
	}

}

void main(string[] args)
{
	// 引数がない場合はヘルプを出力して終了
	if( args.length <= 1 ){ Output.ln( header, help ); return; }
	auto tempargs = args;
	args.length = 0;
	debug{ Output.mode = Output.MODE.VERBOSE; }
	// ヘルプが必要か、と、出力の冗長性に関しては先に調べておく。
	foreach( i, one ; tempargs )
	{
		// ヘルプが要求されている場合
		if     ( ("h" == one) || ("help" == one) || ("?" == one) || ("-h" == one) || ("-help" == one)
					 || ("--help" == one) || "/?" == one )
		{
			if( i+1 < tempargs.length && tempargs[i+1] == "macro" ) output_macro_help( );
			else Output.ln( header, help );
			return;
		}
		// 出力の冗長性の制御
		else if( "verbose" == one ) Output.mode = Output.MODE.VERBOSE;
		else if( "q" == one || "quiet" == one ) Output.mode = Output.MODE.QUIET;
		else if( 0 < one.length ) args ~= one;
	}

	StyleParser parser;
	Macros macros = new Macros;
	// マクロに初期値を設定
	set_default_data!(MACROKEY, DEFAULT_VALUE)( macros );
	// コマンドライン引数の解析
	set_args_data!MACROKEY( macros, args );

	Output.logln(header);
	// -style.xml ファイルの読み込み。
	auto str = macros[MACROKEY.STYLE_FILE].read.to!string;
	Output.logln("success to open ", macros[MACROKEY.STYLE_FILE] );
	parser = new StyleParser( str, macros );
	Output.logln( "parser is ready" );

	// -style.xml ファイルのヘッダだけは読み込んでおく。
	parser.parseHead();
	Output.logln( "<head> is parsed successfully" );

	// マクロを準備する。
	ready_data!MACROKEY( macros );
	Output.logln( "macros are ready" );

	// 依存関係を解決
	set_deps_data!MACROKEY(macros);
	Output.logln( "dependencies are whole resolved." );

	// 準備完了
	// -style.xml ファイルのボディを処理する。
	Output.logln("parse start.");
	auto makefile_cont = parser.parseBody();
	Output.logln("parse success.");

	enforce( 0 < makefile_cont.length, "failed to generate Makefile with " ~ macros[MACROKEY.STYLE_FILE] );

	// Makefile が既存で、footer が見つかった場合、それ以降は残す。
	if( exists(macros[MACROKEY.MAKEFILE]) && macros.have(MACROKEY.FOOTER) )
	{
		Output.logln("old makefile is detected.");
		auto old_makefile_cont = to!string(read(macros[MACROKEY.MAKEFILE]));
		int i = old_makefile_cont.lastIndexOf(macros[MACROKEY.FOOTER]);
		if( 0 < i )
		{
			string post_footer = old_makefile_cont[ i+macros[MACROKEY.FOOTER].length .. $];
			if( 0 < post_footer.length )
			{
				Output.logln("post-footers are detected.");
				makefile_cont ~= post_footer;
			}
		}
	}

	// Makefile を出力。
	write( macros[MACROKEY.MAKEFILE], makefile_cont );
	Output.logln("output the makefile, success.");

	Output.logln("complete.");
}

