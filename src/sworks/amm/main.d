/** Automatic Makefile Maker.
 * Version:    0.168(dmd2.069.2)
 * Date:       2015-Dec-20 20:43:41
 * Authors:    KUMA
 * License:    CC0
 */

/**
   Notice:
     with -version=InJapanese, help messages will be in Japanese.
**/
module sworks.amm.main;

import sworks.base.output;
import sworks.stylexml;
import sworks.amm.args_data;
import sworks.amm.ready_data;
import sworks.amm.deps_data;
debug import std.stdio : writeln;

enum _VERSION_ = "0.168(dmd2.069.2)";
enum _AUTHORS_ = "KUMA";


enum header =
    "Automatic Makefile Maker v" ~ _VERSION_ ~ ". Written by " ~ _AUTHORS_ ~
    ".\n";

/// 説明文の多言語化処理。
struct Lang { string en, jp; }
///
struct OS { string win, nix; }

// コマンドラインに表示するヘルプメッセージ
enum help= header ~ Lang("
** HOW TO USE.
$>amm [target.exe] [make-style.xml] [option for dmd] [options] rootfile.d

** options
h help ?           : show this message.
macro_name         : define the macro named macro_name.
macro_name=value   : define the macro named macro_name as value.
m=Makefile         : set outputting Makefile's name.
                     passing a file of '.mak' extension as argument is same.
root=path          : set the root file of this project.
                     passing a file of '.d' extension as argument is same.
v=0.001            : set version description.
                     for my vwrite.

help macro         : show pre-defined macros.
", "
** 使い方
$>amm [target.exe] [make-style.xml] [option for dmd] [options] rootfile.d

** options
h help ?           : ヘルプを表示します。
macro_name         : マクロを定義済みとします。
macro_name=value   : マクロに値を設定します。
m=Makefile         : 出力される Makefile のファイル名を指定します。
                     拡張子、'.mak' のファイルを渡しても可
root=path          : ルートとなるソースファイルを指定します。
                     拡張子、'.d' のファイルを渡しても可
v=0.001            : ヴァージョン文字列を指定します。数字以外も指定できます。
                     拙著の vwrite.exe 向けです。

help macro         : 定義済みマクロを一覧表示します。
"
).sel;


struct MACROSTORE
{
static:

    // ほぼ固定
    enum M gen_deps_command =
    {
        value: "dmd -c -op -o- -debug",
        explanation: Lang("
    The command that invokes DMD to resolve dependencies.
    >GENERATEDEPS_COMMAND ~ '-deps=' ~ DEPS_FILE ~ COMPILE_FLAG
", "
    DMD に依存関係を解決させる為のコマンド。
    >GENERATEDEPS_COMMAND ~ '-deps=' ~ DEPS_FILE ~ COMPILE_FLAG;
    が実行される。"
).sel
    };

    enum M deps_file =
    {
        value: "tempdeps",
        explanation: Lang("
    the file names of the target of GEN_DEPS_COMMAND.
    after amm exit, this file does not remain.
", "
    GEN_DEPS_COMMAND により生成される一時ファイル名。
    依存関係の解決後、このファイルは消去される。
"
).sel
    };

    enum M footer =
    {
        value: "## generated by amm.",
        explanation: Lang("
    the footer of Makefile.
    the part after the footer will remain after the next invocation of amm.
", "
    Makefile の最後に出力される。
    これ以降に手動で付け足された部分は、amm を再実行し、Makefile を作り直しても
    残る。
"
).sel
    };

    enum M style =
    {
        value: "make-style.xml",
        explanation: Lang("
    STYLE_FILE controls the output.
    when a file with '.xml' extension is in the arguments, the file will be
    regarded as STYLE_FILE.
", "
    Makefile の出力を決定する設定ファイル。
    コマンドライン引数に拡張子が '.xml' のファイルを渡すとこのマクロに設定
    される。
"
).sel
    };

    enum M mak_ext =
    {
        value: ".mak",
        explanation: Lang("
    the extension of Makefile.
    when a file with this extension is in the arguments, the file will be
    regarded as Makefile.
", "
    Makefile の拡張子。
    この拡張子を持つファイル名をコマンドライン引数として渡すと、マクロ名 'M'
    の値としてファイルが登録される。
"
).sel
    };

    enum M xml_ext =
    {
        value: ".xml",
        explanation: Lang("
    the extension of STYLE_FILE.
    when a file with this extension is in the arguments, the file will be
    regarded STYLE_FILE.
", "
    amm の設定ファイルの持つ拡張子。
    この拡張子を持つファイル名をコマンドライン引数として渡すと、
    マクロ名 'STYLE_FILE' の値としてファイルが登録される。
"
).sel
    };

    enum M def_ext =
    {
        value: ".def",
        explanation: Lang("
    the extension of a module definition file of D.
    when a file with this extension is in the arguments, the file will be
    regarded as module definition file.
", "
    D言語の module definition file の拡張子。
    この拡張子を持つファイル名をコマンドライン引数として渡すと、マクロ名 'DEF'
    の値としてファイル登録される。
"
).sel
    };

    enum M ddoc_ext =
    {
        value: ".ddoc",
        explanation: Lang("
    The extension of a file for ddoc.
    when a file with this extension is in the arguments, the file will be
    regarded
    as for ddoc.
", "
    DDOCファイルの拡張子
    このマクロの値として設定された拡張子を持つファイル名をコマンドライン引数
    として渡すと、マクロ名 'DDOC' の値としてファイルが登録される。
"
).sel

    };

    // 実行環境依存
    enum M dll_ext =
    {
        value: OS(".dll", ".so").sel,
        explanation: Lang("
    the extension of a Dynamic Linked Library.
    when a file with this extension is in the arguments, the file will be
    regarded as TARGET, and the macro 'IS_DLL' is defined.
", "
    Dynamic Link Library ファイルの拡張子。
    この拡張子を持つファイル名をコマンドライン引数として渡すと、amm によって生成
    される Makefile のターゲットファイルとして、マクロ名 'TARGET' の値にファイル
    が登録される。
    また、ターゲットファイルが DLL であることを示す、マクロ 'IS_DLL' が定義
    される。
"
).sel
    };

    enum M bracket =
    {
        value: OS("rn", "n").sel,
        explanation: Lang("
    specify newline sequence.
    the values on the below are valid.

    value   |  newline sequence
    'rn'    |  CR + LF
    'r'     |  CR
    'n'     |  LF
", "
    改行文字コードを示す
    マクロの値として、次の文字列を渡すことで改行コードを指定する。

    文字列  | 対応する改行コード
    'rn'    |  CR + LF
    'r'     |  CR
    'n'     |  LF
"
).sel
    };

    enum M exe_ext =
    {
        value: OS(".exe", "").sel,
        explanation: Lang("
    The extension of an executable file.
    when a file with this extension is in the arguments, the file will be
    regarded as TARGET, and will be set to the value of the macro 'TARGET'.
", "
    実行形式のファイルの拡張子。
    この拡張子を持つファイル名をコマンドライン引数として渡すと、amm によって生成
    される Makefile のターゲットファイルとして、マクロ名 'TARGET' の値にファイル
    が登録される。
"
).sel
    };

    enum M obj_ext =
    {
        value: OS(".obj", ".o").sel,
        explanation: Lang("
    The extension of an object file.
    when a file with this extension is in the arguments, the file will be set to
    the value of the macro 'LIBS' to link.
", "
    オブジェクトファイルの拡張子。
    この拡張子を持つファイル名をコマンドライン引数として渡すと、マクロ名 'LIBS'
    の値としてファイルが登録される。
"
).sel
    };

    enum M lib_ext =
    {
        value: OS(".lib", ".a").sel,
        explanation: Lang("
    The extension of a library file.
    When a file with this extension is in the arguments, the file will be set to
    the value of the macro 'LIBS' to link.
    or, if the file name of the value of the macro 'TARGET' has this extnesion,
    the target will be regarded as library, and the macro 'IS_LIB' will be
    defined.
", "
    ライブラリファイルの拡張子。
    この拡張子を持つファイル名をコマンドライン引数として渡すと、マクロ名 'LIBS'
    の値としてファイルが登録される。
    また、マクロ名 'TARGET' の値として登録されたファイル名がこの拡張子を持って
    いた場合、ターゲットがライブラリファイルであること示すマクロ 'IS_LIB'
    が定義される。
"
).sel
    };

    enum M src_ext =
    {
        value: ".d",
        explanation: Lang("
    The extension of a source file.
    When a file with this extension is in the arguments, the file will be
    regarded the root file of the project. and the file will be set to the value
    of the macro 'ROOT'.
    When the value of macro 'TARGET' is undefined, the value of the macro will
    be set as 'ROOT' + 'EXE_EXT'.
", "
    ソースファイルの拡張子。
    この拡張子を持つファイル名をコマンドライン引数として渡すと、マクロ名 'ROOT'
    の値としてファイルが登録され、プロジェクトの依存関係を解決するための
    ルートファイル として扱われる。
    また、マクロ名 'TARGET' が指定されなかった場合は、ROOT + EXE_EXT が
    マクロ名 'TARGET' に設定される。
"
).sel
    };

    enum M rc_ext =
    {
        value: ".rc",
        explanation: Lang("
    The extension of a resource file.
    When a file with this extension is in the arguments, the file will be set to
    the value of the macro 'RC'.
    Windows only.
", "
    リソースファイルの拡張子。
    この拡張子を持つファイル名をコマンドライン引数として渡すと、マクロ名 'RC'
    の値としてファイルが登録される。
"
).sel
    };

    enum M gmake =
    {
        value: OS(null, "defined").sel,
        explanation: Lang("
    If defined, the Makefile to generate is for GNU Make.
    On linux, default value of this is 'defined'.
", "
    出力する Makefile が GNU Make 向けであるかどうか。
    linux では初期値で 'defined'。
"
).sel
    };

    // amm が用意する。
    enum M dependencies =
    {
        explanation: Lang("
    Amm set dependencies of the project to this value.
", "
    DMD により解決された依存関係を表わ文字列が amm により登録される。
"
).sel
    };

    enum M remake_command =
    {
        explanation: Lang("
    The command line arguments that invoked amm is set to the value.
", "
    amm を起動した時のコマンドが登録される。
"
).sel
    };
    enum M to_compile =
    {
        explanation: Lang("
    Amm set filenames to compile to this value.
", "
    DMD により解決された依存関係のうち、マクロ名 'SRC' に登録されたフォルダ以下
    に含まれ、マクロ名 'IMP' に登録されたフォルダ以下には含まれなかったものが
    ここに登録される。
"
).sel
    };

    enum M to_link =
    {
        explanation: Lang("
    Amm set filenames to link to this value.
", "
    リンクされるべきファイルが登録される。
"
).sel
    };

    // コマンドラインから省略指定で設定する。
    enum M src =
    {
        value: "src",
        explanation: Lang("
    Amm set command line argument that starts with '-I' to this value.
    This value is used to decide that the root directory of source files
    to be compiled.
", "
    コマンドライン引数のうち、'-Ixxx;yyy;zzz' のような形で指定されたものが
    ここに登録される。
    ソースファイル探索のルートフォルダを決定する。
"
).sel
    };

    enum M root =
    {
        explanation: Lang("
    Amm set the name of the root file of the project.
", "
    プロジェクトのルートとなるファイルが登録される。
    コマンドライン引数のうち、マクロ名 'SRC_EXT' に登録された拡張子を持つものが
    ここに登録される。
"
).sel
    };

    enum M target =
    {
        explanation: Lang("
    The target file name that will be generated by the Makefile that will be
    generated by amm.
", "
    amm が生成する Makefile のターゲットとなるファイル名。
    省略した場合は、ROOT + EXE_EXT が用いられる。
"
).sel
    };

    enum M compile_flag =
    {
        explanation: Lang("
    Compile options for dmd.
    Amm set its command line argument that starts with '-' to this value.
", "
    DMDのコンパイルオプション。
    コマンドライン引数のうち、\"-\"(ハイフン)で始まるものがここに登録される。
"
).sel
    };

    enum M link_flag =
    {
        explanation: Lang("
    Link options for dmd.
    Amm set its command line argument that starts with '-L' to this value.
", "
    DMDのリンクオプション。
    コマンドライン引数のうち、\"-L\" で始まるものがここに登録される。
"
).sel
    };

    enum M libs =
    {
        explanation: Lang("
    Library files are set to this value.
", "
    ライブラリファイル(リンクされるがコンパイルはされないファイル)が登録される。
    コマンドライン引数のうち、マクロ名 'LIB_EXT' に登録された拡張子を持つ
    ファイルがここに登録される。
"
).sel
    };

    enum M rc =
    {
        explanation: Lang("
    Resource files are set to this value.
    Windows only.
", "
    リソースファイル。
    コマンドライン引数のうち、マクロ名 'RC_EXT' に登録された拡張子を持つファイル
    がここに登録される。
"
).sel
    };

    enum M def =
    {
        explanation: Lang("
    Module definition file is set to this value.
    Windows only.
", "
    module definition file。
    コマンドライン引数のうち、マクロ名 'DEF_EXT' に登録された拡張子を持つ
    ファイルがここに登録される。
"
).sel
    };

    enum M ddoc =
    {
        explanation: Lang("
    A file for ddoc.
", "
    DDOCファイル。
    コマンドライン引数のうち、マクロ名 'DDOC_EXT' に登録された拡張子を持つ
    ファイルがここに登録される。
"
).sel
    };

    enum M dd =
    {
        value: "doc",
        explanation: Lang("
    A destination directory for ddoc.
    Amm set its command line argument that starts with '-Dd' to this vlaue.
", "
    DMD の '-d' オプションにより生成されるドキュメントファイル群の生成先
    フォルダ。
    コマンドライン引数のうち、'-Ddxxx' という形のものが登録される。
"
).sel
    };

    enum M m =
    {
        value: "Makefile",
        explanation: Lang("
    The name of the Makefile to be generated by amm.
", "
    amm が生成する Makefile のファイル名。
    コマンドライン引数のうち、マクロ名 'MAK_EXT' に登録された拡張子を持つ
    ファイルがここに登録される。
"
).sel
    };

    enum M is_dll =
    {
         explanation: Lang("
    If true, the target file that will be generated by Makefile is shared
    library.
", "
    Makefile のターゲットが Dynamic Link Library だった場合に defined となる。
"
).sel
    };
    enum M is_lib =
    {
        explanation: Lang("
    If true, the target file that will be generated by Makefile is library.
", "
    Makefile のターゲットが ライブラリファイルだった場合に defined となる。
"
).sel
    };

    // コマンドラインから完全指定で設定する。
    enum M imp =
    {
        value: "import",
        explanation: Lang("
    A root directory for files to import.
", "
    DMD の '-I' オプションのパラメタとして引き渡さるが、コンパイルはされない
    ファイルを含むフォルダ名を指定する。
"
).sel
    };

    enum M lib =
    {
        value: "lib",
        explanation: Lang("
    A directory for libraries to link.
", "
    リンクされるべきライブラリを含むフォルダ名を指定する。
"
).sel
    };
    enum M v =
    {
        explanation: Lang("
    for my vwrite.
", "
    vwrite.exe に引き渡されるヴァージョン情報を表わす文字列を登録する。
"
).sel
    };

    enum M env =
    {
        explanation: Lang("
    see make-style.xml.
", "
    設定ファイル、make-style.xml の <environment>タグのセレクタ。
    このマクロに設定された値とマッチする(0==icmp()) id 属性を持つ<environment>
    要素が評価される。
"
).sel
    };

    auto PREDEF()
    {
        struct _PREDEF
        {
            string opDispatch(string NAME)()
            {
                return __traits(getMember, MACROSTORE, NAME).stringof;
            }
        }
        return _PREDEF();
    }
}

void main(string[] args)
{
    import std.conv : to;
    import std.exception : enforce;
    import std.file : read, exists, write;
    import std.string : lastIndexOf;

    // 引数がない場合はヘルプを出力して終了
    if (args.length <= 1) return help.outln;
    auto tempargs = args;
    args.length = 0;
    debug { Output.mode = Output.MODE.VERBOSE; }
    // ヘルプが必要か、と、出力の冗長性に関しては先に調べておく。
    foreach (i, one ; tempargs)
    {
        // ヘルプが要求されている場合
        if     (("h" == one) || ("help" == one) || ("?" == one) ||
                ("-h" == one) || ("-help" == one) || ("--help" == one) ||
                "/?" == one)
        {
            if (i+1 < tempargs.length && tempargs[i+1] == "macro")
                output_macro_help();
            else help.outln;
            return;
        }
        // 出力の冗長性の制御
        else if ("verbose" == one) Output.mode = Output.MODE.VERBOSE;
        else if ("q" == one || "quiet" == one) Output.mode = Output.MODE.QUIET;
        else if (0 < one.length) args ~= one;
    }

    StyleParser parser;
    // マクロに初期値を設定
    auto macros = default_macros;

    // コマンドライン引数の解析
    set_args_data!MACROSTORE(macros, args);

    header.logln;
    // -style.xml ファイルの読み込み。
    auto str = macros[MACROSTORE.PREDEF.style].read.to!string;
    logln("success to open ", macros[MACROSTORE.PREDEF.style]);
    parser = new StyleParser(str, macros);
    logln("parser is ready");

    // -style.xml ファイルのヘッダだけは読み込んでおく。
    parser.parseHead;
    logln("<head> is parsed successfully");

    // マクロを準備する。
    ready_data!MACROSTORE(macros);
    logln("macros are ready");

    // 依存関係を解決
    set_deps_data!MACROSTORE(macros);
    logln("dependencies are whole resolved.");

    //########## 準備完了 ##########
    // -style.xml ファイルのボディを処理する。
    logln("parse start.");
    auto makefile_cont = parser.parseBody();
    logln("parse success.");

    enforce(0 < makefile_cont.length, "failed to generate Makefile by " ~
            macros[MACROSTORE.PREDEF.style]);

    // Makefile が既存で、footer が見つかった場合、それ以降は残す。
    auto footer = macros[MACROSTORE.PREDEF.footer];
    if (macros[MACROSTORE.PREDEF.m].exists && 0 < footer.length)
    {
        logln("old makefile is detected.");
        auto old_makefile_cont = macros[MACROSTORE.PREDEF.m].read.to!string;
        auto i = old_makefile_cont.lastIndexOf(footer);
        if (0 < i)
        {
            string post_footer = old_makefile_cont[i+footer.length .. $];
            if (0 < post_footer.length)
            {
                logln("post-footers are detected.");
                makefile_cont ~= post_footer;
            }
        }
    }

    // Makefile を出力。
    macros[MACROSTORE.PREDEF.m].write(makefile_cont);
    logln("complete.");
}

private:

// MACROSTROEの中身
struct M { string value, explanation; }

// マクロに初期値を設定します。
Macros default_macros()
{
    auto data = new Macros;
    import std.path :pathSeparator;

    foreach (one ; __traits(allMembers, MACROSTORE))
    {
        static if (is(typeof(__traits(getMember, MACROSTORE, one)) : M))
        {
            if      ("bracket" == one)
                data[one] = new BracketItem(
                    __traits(getMember, MACROSTORE, one).value);
            else if ("src" == one ||
                     "imp" == one ||
                     "lib" == one)
                data[one] = new MacroItem(
                    __traits(getMember, MACROSTORE, one).value,
                     pathSeparator);
            else
                data[one] = new MacroItem(
                    __traits(getMember, MACROSTORE, one).value);

        }
    }
    return data;
}

//
void output_macro_help()
{
    Lang("the list of pre defined macros.",
         "定義済みマクロ一覧").sel.outln;
    "--------------------".outln;
    foreach (name ; __traits(allMembers, MACROSTORE))
    {
        static if (is(typeof(__traits(getMember, MACROSTORE, name)) : M))
        {
            Lang("Name : '", "マクロ名 : '").sel.outln(name, "'");
            Lang("Default value   : '", "初期値   : '").sel
                .outln(__traits(getMember, MACROSTORE, name).value, "'");
            Lang("Description :", "説明 :").sel.output;
            __traits(getMember, MACROSTORE, name).explanation.outln;
        }
    }
}

string sel(Lang lang)
{
    version (InJapanese) return lang.jp;
    else return lang.en;
}

string sel(OS os)
{
    version      (Windows) return os.win;
    else version (linux) return os.nix;
    else static assert(0);
}

